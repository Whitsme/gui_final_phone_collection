// Aaron Whitaker
// Winter 2022
// CIS 207
// GUI Final: Phone Collection

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Windows.Forms;

namespace GUIFinal
{
    // class 'PhoneEditor' is called by class 'Form1' and is a new form when that is generated by user action event method 'buttonOpenEditor_Click' in class 'Form1'
    public partial class PhoneEditor : Form
    {
        // PhoneCollection constructor
        PhoneCollection myPhones;
        // variable used to check if user saved data prior to closing form
        bool dataSaved = false;
        // constants for last use when converting to inches
        const double cm_to_in = 2.54;
        const double mm_to_in = 25.4;

        // calls collection of phones and images from PhoneCollection // adds them to myPhones and updates the ComboBox with the collection
        public PhoneEditor(PhoneCollection importedCollection)
        {            
            InitializeComponent();

            myPhones = importedCollection;

            UpdateComboBox();                      
        }
        // method 'comboBoxPhones_SelectedIndexChanged' is called when user selects phone in form 'comboBoxMovies' // passes user section through list 'myPhones' to display movie info
        // 'selectedPhone[Brand, Year, Screen Size, Unit, Mass,and Price]' // displays image with matching 'selectedPhone.id' file name from 'myPhones.imagePath'
        private void comboBoxPhones_SelectedIndexChanged(object sender, EventArgs e)
        {
            
            // gets index of selected phone based on ComboBox index selected
            Phones selectedPhone = myPhones.GetPhone(comboBoxPhones.SelectedIndex);

            // displays movie info 'selectedPhone[Brand, Year, Screen Size, Unit, Mass,and Price]' in text boxes 
            textBoxID.Text = selectedPhone.id;
            textBoxBrand.Text = selectedPhone.brand;
            textBoxModel.Text = selectedPhone.model;
            textBoxYear.Text = selectedPhone.year;
            textScreenSize.Text = selectedPhone.screensize;
            textBoxUnit.Text = selectedPhone.screensizeunit;
            textBoxMass.Text = selectedPhone.mass;
            textBoxPrice.Text = selectedPhone.price;
            // vars for passing to covert_to_in method, passing screen size and units // method returns converted inches
            string screensize = selectedPhone.screensize;
            string screensizeunit = selectedPhone.screensizeunit;
            textBoxIn.Text = convert_to_in(screensize, screensizeunit);


            // displays image with matching 'selectedPhone.id' file name from 'myPhones.imagePath' // pop up error displayed if no image matching .id
            try
            {
                pictureBoxPhone.Image = Image.FromFile(myPhones.imagePath + "/" + selectedPhone.id + ".jpg");
            }
            catch
            {
                MessageBox.Show("No image found for this phone.", "No image", MessageBoxButtons.OK, MessageBoxIcon.Information);
                pictureBoxPhone.Image = null;
            }
            dataSaved = true;
        }
        // updates myPhones combo box
        void UpdateComboBox()
        {
            comboBoxPhones.Items.Clear();
            string[] comboBoxItems = myPhones.GetPhoneCombo();
            // check for if there is anything in the ComboBox and error pops up if not
            if (comboBoxItems.Length == 0)
            {
                MessageBox.Show("No items to display.", "No items", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            comboBoxPhones.Items.AddRange(comboBoxItems);
        }
        // method for converting cm & mm to inches requiring screen size and units // returns converted inches, nothing (if no input), or unknown along with an message box
        private string convert_to_in(string screensize, string screensizeunit)
        {
            double to_in;
            string inches;
            // check for inches
            if (screensizeunit == "in")
            {
                inches = "";
                return inches;
            }
            else
            {
                // check for cm
                if (screensizeunit == "cm")
                {
                    double cm = Convert.ToDouble(screensize);
                    to_in = Math.Round((cm / cm_to_in), 2);
                    inches = to_in.ToString();
                    return inches;
                }
                // check for mm
                else if (screensizeunit == "mm")
                {
                    double mm = Convert.ToDouble(screensize);
                    to_in = Math.Round((mm / mm_to_in), 2);
                    inches = to_in.ToString();
                    return inches;

                }
                // check for no input
                else if (screensizeunit == null)
                {
                    inches = "";
                    return inches;
                }
                // check for invalid input
                else
                {
                    MessageBox.Show("Invalid screen size unit.", "Invalid Unit", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    inches = "unknown";
                    return inches;
                }
            }
        }
        // method is for event from user click 'buttonSave_Click' // updates text in 'textBox[Brand, Year, Screen Size, Unit, Mass,and Price]' to 'myPhones' 
        // checks for valid Year, Screen Size, Unit, Mass,and Price (errors pop up if any are invalid)
        private void buttonSave_Click(object sender, EventArgs e)
        {
            // stores data below
            Phones updatePhone = new Phones();
            // updates current id
            updatePhone.id = myPhones.GetPhone(comboBoxPhones.SelectedIndex).id;
            // updates current brand
            updatePhone.brand = textBoxBrand.Text;
            // updates current year
            updatePhone.year = textBoxYear.Text;
            // check for valid year input
            try
            {
                // additional check for valid year input
                int Year = Int32.Parse(textBoxYear.Text);
                // first cell phone was made in 1973
                if ((Year) <= 9999 & (Year) >= 1973) 
                {
                    updatePhone.year = textBoxYear.Text;
                    dataSaved = true;
                }
                // prints error message and ends program
                else if (updatePhone.year == null)
                {
                    dataSaved = true;
                }
                else
                {
                    // pop up error
                    MessageBox.Show("Invalid year input. Please enter a valid year ~ >= 1973 next time", "Invalid Year",  MessageBoxButtons.OK, MessageBoxIcon.Information);
                    dataSaved = false;
                }
            }
            catch 
            {
                // pop up error
                MessageBox.Show("Please enter a valid year", "Invalid Year", MessageBoxButtons.OK, MessageBoxIcon.Information);
                dataSaved = false;
            }
            // updates current model
            updatePhone.model = textBoxModel.Text;
            // check for valid screen size
            try {
                if (Convert.ToDouble(textScreenSize.Text) <= 2147483647.0 & (Convert.ToDouble(textScreenSize.Text) >= 1.0))
                {
                    updatePhone.screensize = textScreenSize.Text;
                    dataSaved = true;
                }
                else if (updatePhone.screensize == null)
                {
                    dataSaved = true;
                }
                else
                {
                    MessageBox.Show("Invalid screen size input. Please enter a valid screen size.", "Invalid Screen Size", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    dataSaved = false;
                }
            }
            catch
            {
                MessageBox.Show("Invalid screen size input. Please enter a valid screen size.", "Invalid Screen Size", MessageBoxButtons.OK, MessageBoxIcon.Information);
                dataSaved = false;
            }
            
            // check for valid screen size unit
            try {
                if (textBoxUnit.Text.ToLower() == "cm" || textBoxUnit.Text.ToLower() == "mm" || textBoxUnit.Text.ToLower() == "in")
                {
                    updatePhone.screensizeunit = textBoxUnit.Text;
                    dataSaved = true;
                }
                else if (updatePhone.screensizeunit == null)
                {
                    dataSaved = true;
                }
                else
                {
                    MessageBox.Show("Invalid screen size unit input. Please enter a valid screen size unit (cm, mm, or in).", "Invalid Unit", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    dataSaved = false;
                }
            }
            catch
            {
                MessageBox.Show("Invalid screen size unit input. Please enter a valid screen size unit (cm, mm, or in).", "Invalid Unit", MessageBoxButtons.OK, MessageBoxIcon.Information);
                dataSaved = false;
            }
            
            // check for valid mass
            try
            {
                if (Convert.ToInt32(textBoxMass.Text) <= 2147483647 & (Convert.ToInt32(textBoxMass.Text) >= 1))
                {
                    updatePhone.mass = textBoxMass.Text;
                    dataSaved = true;
                }
                else if (updatePhone.mass == null)
                {
                    dataSaved = true;
                }
                else
                {
                    MessageBox.Show("Invalid mass input. Please enter a valid mass.", "Invalid Mass", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    dataSaved = false;
                }
            }
            catch {
                MessageBox.Show("Invalid mass input. Please enter a valid mass.", "Invalid Mass", MessageBoxButtons.OK, MessageBoxIcon.Information);
                dataSaved = false;
            }
            // check for valid price
            try
            {
                if (Convert.ToInt32(textBoxPrice.Text) <= 2147483647 & (Convert.ToInt32(textBoxPrice.Text) >= 1))
                {
                    updatePhone.price = textBoxPrice.Text;
                    dataSaved = true;
                }
                else if (updatePhone.price == null)
                {
                    dataSaved = true;
                }
                else
                {
                    MessageBox.Show("Invalid price input. Please enter a valid price.", "Invalid Price", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    dataSaved = false;
                }
            }
            catch
            {
                MessageBox.Show("Invalid price input. Please enter a valid price.", "Invalid Price", MessageBoxButtons.OK, MessageBoxIcon.Information);
                dataSaved = false;
            }
            // check for dataSaved (based on if info in valid and/or present above)
            if (dataSaved == true)
            {             
                // try to save the updates to myPhones // pop up error if not
                try
                {
                    myPhones.UpdatePhone(updatePhone);
                    myPhones.SaveAllJSON(updatePhone.id);
                }
                catch
                {
                    MessageBox.Show("Could not save movie ID # " + updatePhone.id, "Did not Save", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
                // updates the ComboBox to reflect any changes
                UpdateComboBox();
            }
            else
            {
                DialogResult userResponse = MessageBox.Show("Some data is invalid or missing. Continue saving?", "Missing Data", MessageBoxButtons.YesNo, MessageBoxIcon.Information);

                if (userResponse == DialogResult.Yes)
                {
                    try
                    {
                        myPhones.UpdatePhone(updatePhone);
                        myPhones.SaveAllJSON(updatePhone.id);
                    }
                    catch
                    {
                        MessageBox.Show("Could not save movie ID # " + updatePhone.id, "Did not Save", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                    // updates the ComboBox to reflect any changes
                    UpdateComboBox();
                }
            }
        }
    }
}
